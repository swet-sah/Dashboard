{"ast":null,"code":"var _jsxFileName = \"/home/sweta/newfile/src/Component/Dashboard/Charts/Histogram.jsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Histogram = () => {\n  // Example data for corporate and college age groups\n  const corporateData = [20, 22, 26, 28, 30, 32, 34, 36, 40, 42];\n  const collegeData = [18, 20, 22, 23, 24, 25, 26, 27, 28, 30];\n\n  // Calculate the frequency of each age group\n  const calculateFrequency = data => {\n    const frequency = {};\n    data.forEach(age => {\n      const group = Math.floor(age / 10) * 10; // Group ages in increments of 10\n      frequency[group] = (frequency[group] || 0) + 1;\n    });\n    return frequency;\n  };\n\n  // Get frequency data for corporate and college age groups\n  const corporateFrequency = calculateFrequency(corporateData);\n  const collegeFrequency = calculateFrequency(collegeData);\n\n  // Get the maximum frequency across both datasets\n  const maxFrequency = Math.max(...Object.values(corporateFrequency), ...Object.values(collegeFrequency));\n\n  // Determine the color scale for different age groups\n  const getColor = group => {\n    if (group >= 40) return 'red';\n    if (group >= 30) return 'orange';\n    if (group >= 20) return 'blue';\n    return 'green';\n  };\n\n  // Render the histogram bars\n  const renderBars = () => {\n    const bars = [];\n    for (let group = 0; group <= 40; group += 10) {\n      const corporateCount = corporateFrequency[group] || 0;\n      const collegeCount = collegeFrequency[group] || 0;\n      const totalCount = corporateCount + collegeCount;\n      const height = totalCount / maxFrequency * 100; // Calculate the height based on frequency\n\n      bars.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bar\",\n        style: {\n          height: `${height}%`,\n          backgroundColor: getColor(group)\n        },\n        children: totalCount\n      }, group, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this));\n    }\n    return bars;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"histogram\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bars\",\n      children: renderBars()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_c = Histogram;\nexport default Histogram;\nvar _c;\n$RefreshReg$(_c, \"Histogram\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Histogram","corporateData","collegeData","calculateFrequency","data","frequency","forEach","age","group","Math","floor","corporateFrequency","collegeFrequency","maxFrequency","max","Object","values","getColor","renderBars","bars","corporateCount","collegeCount","totalCount","height","push","className","style","backgroundColor","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/sweta/newfile/src/Component/Dashboard/Charts/Histogram.jsx"],"sourcesContent":["import React from 'react';\n\nconst Histogram = () => {\n  // Example data for corporate and college age groups\n  const corporateData = [20, 22, 26, 28, 30, 32, 34, 36, 40, 42];\n  const collegeData = [18, 20, 22, 23, 24, 25, 26, 27, 28, 30];\n\n  // Calculate the frequency of each age group\n  const calculateFrequency = (data) => {\n    const frequency = {};\n    data.forEach((age) => {\n      const group = Math.floor(age / 10) * 10; // Group ages in increments of 10\n      frequency[group] = (frequency[group] || 0) + 1;\n    });\n    return frequency;\n  };\n\n  // Get frequency data for corporate and college age groups\n  const corporateFrequency = calculateFrequency(corporateData);\n  const collegeFrequency = calculateFrequency(collegeData);\n\n  // Get the maximum frequency across both datasets\n  const maxFrequency = Math.max(\n    ...Object.values(corporateFrequency),\n    ...Object.values(collegeFrequency)\n  );\n\n  // Determine the color scale for different age groups\n  const getColor = (group) => {\n    if (group >= 40) return 'red';\n    if (group >= 30) return 'orange';\n    if (group >= 20) return 'blue';\n    return 'green';\n  };\n\n  // Render the histogram bars\n  const renderBars = () => {\n    const bars = [];\n    for (let group = 0; group <= 40; group += 10) {\n      const corporateCount = corporateFrequency[group] || 0;\n      const collegeCount = collegeFrequency[group] || 0;\n      const totalCount = corporateCount + collegeCount;\n      const height = (totalCount / maxFrequency) * 100; // Calculate the height based on frequency\n\n      bars.push(\n        <div\n          key={group}\n          className=\"bar\"\n          style={{\n            height: `${height}%`,\n            backgroundColor: getColor(group),\n          }}\n        >\n          {totalCount}\n        </div>\n      );\n    }\n    return bars;\n  };\n\n  return (\n    <div className=\"histogram\">\n      <div className=\"bars\">{renderBars()}</div>\n    </div>\n  );\n};\n\nexport default Histogram;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}